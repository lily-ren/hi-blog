<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啊！你找到我啦！</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-25T06:23:29.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>=_=初级小菜鸡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux命令</title>
    <link href="http://yoursite.com/2020/08/25/archives/linux%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/08/25/archives/linux%E6%8C%87%E4%BB%A4/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="linux命令："><a href="#linux命令：" class="headerlink" title="linux命令："></a>linux命令：</h4><p>​    -pwd-查看用户的当前目录    </p><p>​    -cd -切换目录   -cd前的目录(使用tab可以补全输入命令)</p><p>​        .当前目录 </p><p>​        ..退去上级目录 </p><p>​        ~主目录  </p><p>​    -绝对路径（有/）与相对路径：相对是相对当前目录来说的。 去往不同的路径时使用绝对。</p><p>​    -ls-显示当前目录信息(只显示普通文件)  stat-显示文件详细信息  ls -ah:查看隐藏目录</p><p>​        -a：可显示隐藏文件，.开头的文件</p><p>​        -l：使用长格式列出文件，所有文件详情都列出</p><p>​        -la ~:使用长格式列出所有的文件，包括隐藏文件。</p><p>​        -r：文件以相反的次序显示</p><p>​        -</p><p>​        -t：根据最后修改时间改变</p><p>​        -ltr s*：列出所有开头是s的文件</p><p>​    -mkdir[参数]-[目录]-在当前目录下，创建一个空目录</p><p>​        -p：创建多级目录</p><p>​        -v：显示目录的常见过程</p><p>​    -rmdir-删除当前目录</p><p>​    -touch-创建一个任意格式的文件 记得加后缀</p><p>​    -cp-复制文件。cp[参数]-[文件]（还有很多的option）</p><p>​        -f [文件]-[文件重命名]：复制直接覆盖原文件</p><p>​        -i：会询问是否覆盖</p><p>​        -v：显示cp的执行过程</p><p>​        -R：复制目录</p><p>​        -r：一次复制多个文件</p><p>​    -mv 文件+移去目录：移动文件 </p><p>​        -i：存在同名文件，则会询问是否覆盖</p><p>​    -cat-查看文本文件的内容</p><p>​        -n：加行号显示</p><p>​    -more：查看内容长的文本</p><p>​    -echo-文件重定向，有则打开，无则创建</p><p>​    -gzip,bzip2,tar -czvf,-文件压缩命令</p><p>​    -gzip -d,bzip2 -d,tar -xzvf,-解压命令</p><p>​    -man -显示命令的使用 q用来退出</p><p>​    -clear-清空屏幕</p><p>​    -kill-杀死进程， 用ps（静态进程快照）top（动态进程）查找进程，然后kill+pid    sudo lsof -i :端口 -查找响应的端口号(kill也要加sudo)</p><p>​    -alias-对命令重命名 别名=指令名</p><p>​    -ssh[参数]-[主机]：登录远程服务器。给予ssh加密协议实现安全的远程登录服务器，实现对服务器的管理</p><p>​        -1/2：强制使用 ssh 协议版本 1/2</p><p>​        -4/6：强制使用 ipv4/6 地址</p><p>​        -f：后台执行ssh指令</p><p>​        -l&lt;登录名&gt;：指定连接远程服务器的登录用户名</p><p>​        -p&lt;端口&gt;：指定远程服务器上的端口</p><p>​    -vim </p><p>​       - vi+文件名-进入文件 按s进入insert开始修改，修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。</p><p>shell:是一个用shell编写的脚本程序</p><p>​      有许多种类：bash，dash，zsh等</p><p>​      bash：（默认）有很灵活和强大的编程接口，同时又有很友好的用户界面。功能包括命令补齐、通配符、命令历史记录、别名等。</p><p>​      dash：bash的弟弟，功能没有bash多。</p><p>​      zsh：最新的，所有shell的集合+增加功能。改进的shell选项处理、shell兼容性模式以及可加载模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;linux命令：&quot;&gt;&lt;a href=&quot;#linux命令：&quot; class=&quot;headerlink&quot; title=&quot;linux命令：&quot;&gt;&lt;/a&gt;linux命令：&lt;/h4&gt;&lt;p&gt;​    -pwd-查看用户的当前目录    &lt;/p&gt;
&lt;p&gt;​    -cd -切换目录 </summary>
      
    
    
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git的基础命令</title>
    <link href="http://yoursite.com/2020/08/25/archives/git/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/08/25/archives/git/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>##<center>git基础指令</center></p><hr><ul><li><p>git     查看是否存在及版本</p></li><li><p>git init     把目录变成github可以管理的仓库</p></li><li><p>git add 文件名     把工作区的文件添加到github仓库的暂存区</p></li><li><p>git commit -m “本次提交说明”     把暂存区的文件提交给分支。可add多次再一次commit     一步到位：git commit -am “本次提交说明”</p></li><li><p>git status     查看仓库状态</p></li><li><p>git diff 文件名     查看与上次提交的有什么不同 （Mac上一般使用vscode或者 sourceTree来查看版本的不同。）</p></li><li><p>git log     显示从最近到最远的提交历史​</p></li><li><p>git log –pretty=oneline     显示从最近到最远的提交日志的版本号</p></li><li><p>git log –graph     看到分支合并图</p></li><li><p>git reset –hard HEAD^或commit_id     git中用HEAD表示当前版本，HEAD^上一个版本，HEAD^^上上个版本；版本号写前几位就可以</p></li><li><p>git reflog     查看每条历史命令</p></li><li><p>git restore 文件名     丢弃工作区的改动</p></li><li><p>git reset HEAD 文件名     把暂存区的修改撤销掉，重新放回工作区</p></li><li><p>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x2e;&#x63;&#111;&#x6d;</a>: 我的github账户名/远程上要用的空仓库名.git     把本地仓库的内容推送到GitHub仓库</p></li><li><p>git clone <a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#46;&#99;&#x6f;&#x6d;</a>: 我的github账户名/远程上要用的仓库名.git     把远程库克隆到本地库</p></li><li><p>git remote set-url origin <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x2e;&#99;&#x6f;&#109;</a>: 新地址/仓库.git     更改远程仓库新指向</p></li><li><p>git push     把本地库的内容推送到远程</p></li><li><p>git push 远程主机名 本地分支名: 远程分支名     把本地分支的内容推送到远程指定分支​</p></li><li><p>git checkout -b 分支名     创建分支并切换</p></li><li><p>git switch -c 分支名     创建分支并切换。相当于git branch 分支名（创建分支） + git checkout 分支名（切换分支）/ git switch 分支名</p></li><li><p>git branch     查看当前分支  -a显示所有分支  -r显示远程分支  -d删除分支  -D 强行删除分支</p></li><li><p>git merge 分支名     合并指定分支（写的分支名）到当前分支</p></li><li><p>git branch -d 分支名     删除制定分支（写的分支名）</p></li><li><p>git fetch 远程主机名      将某个远程主机的更新全部取回本地</p></li><li><p>git fetch 远程主机名 分支名     只想取回特定分支的更新</p></li><li><p>git pull 远程主机名 远程分支名: 本地分支名     将远程主机的某个分支的更新取回，并与本地指定的分支合并（如果远程分支是与当前分支合并，则冒号后面的部分可以省略）</p></li><li><p>git pull相当于  git fetch origin master   //从远程主机的master分支拉取最新内</p></li><li><p>git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中</p></li><li><p>git merge 分支名     合并分支上的内容到本地来</p></li></ul><p>​    注：拉取后也要push，时刻铭记远程-本地-远程的原则</p><h4 id="开发步骤："><a href="#开发步骤：" class="headerlink" title="开发步骤："></a>开发步骤：</h4><p>​    1：克隆代码     git clone <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#46;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#46;&#99;&#111;&#x6d;</a>: 我的github账户名/远程上要用的仓库名.git</p><p>​    2：查看所有分支     git branch –all </p><p>​    3：创建本地新的dev分支     git branch 分支名   #创建本地分支</p><p>​    4：发布dev分支     git push origin dev:dev  #同步dev分支的代码到远程服务器，这样远程仓库也有一个dev分支了。</p><p>​    5：在dev分支开发代码</p><ul><li><p>git checkout dev  # 切换到dev分支进行开发</p></li><li><p># 开发代码之后，我们有两个选择</p></li><li><p># 第一个：如果功能开发完成了，可以合并主分支</p></li><li><p>git checkout master  # 切换到主分支</p></li><li><p>git merge dev  # 把dev分支的更改和master合并</p></li><li><p>git push  # 提交主分支代码远程</p></li><li><p>git checkout dev  # 切换到dev远程分支</p></li><li><p>git push  # 提交dev分支到远程</p></li><li><p># 第二个：如果功能没有完成，可以直接推送</p></li><li><p>git push  # 提交到dev远程分支</p></li><li><p># 注意：在分支切换之前最好先commit全部的改变，除非你真的知道自己在做什么。</p></li></ul><p>​    6：删除分支</p><ul><li><p>git push origin :dev  # 删除远程dev分支，危险命令哦</p></li><li><p># 下面两条是删除本地分支</p></li><li><p>git checkout master  # 切换到master分支</p></li><li><p>git branch -d dev  # 删除本地dev分支</p></li></ul><h4 id="新建自己的git仓库："><a href="#新建自己的git仓库：" class="headerlink" title="新建自己的git仓库："></a>新建自己的git仓库：</h4><p>  1：mkdir 文件名 –  创建新文件  cd去到当前文件的路径下，使用pwd检查文件路径。</p><p>  2：初始化  当前路径下 git init 把当前目录变成git可以管理的仓库</p><p>  3：添加文件   使用git add + 文件名，将文件添加到仓库。（添加到仓库的暂存区）</p><p>​     提交文件   使用git commit -m +文件提交情况说明，将文件提交到仓库。。可add(将文件添加到暂存区中)多次再一次commit（提交到分支上）     一步到位：git commit -am “本次提交说明”</p><p>  4: 查看修改状况   git status  如果有更改，会显示 modified</p><p>​      不记得修改了哪里，就可以使用source tree来查看对比上次提交修改了哪些地方。 </p><p>  5: 版本检查：source tree中的分支可以直接查看提交的版本。（git log）</p><p>  6: 文件版本退回：git reset –        退回后，新加的版本就没有了，但是可以通过hard找回  git reset –hard HEAD  （指向当前版本）</p><p>​      git中用HEAD表示当前版本，HEAD^上一个版本，HEAD^^上上个版本；版本号写前几位就可以</p><p>  7: 删除文本：git rm + 文件名   恢复是？？？checkout 为什么没有用</p><p>  8: 创建公钥</p><p>  9: 在github上创建一个远程库，然后使用git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>: 用户名/仓库名.git</p><p>  与远程的仓库链接。      第一次再使用git push -u origin master，把前面推进仓库的文件发送到远程仓库去。</p><p>*master是git为我们自动创建的第一条分支。</p><p>*nvm alias default 8.12.0 //设置默认的node版本（以后都不用改的那种）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​&lt;br&gt;##&lt;center&gt;git基础指令&lt;/center&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git     查看是否存在及版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git init     把目录变成github可以管理的仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>curl</title>
    <link href="http://yoursite.com/2020/08/25/archives/other/curl/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/curl/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>-curl-command line url viewer。一个命令行工具。发出网络请求，然后得到和提取数据。</p><p>-使用：</p><p>​    -curl + url =直接显示网页源码</p><p>​    -curl -o [文件名] +url = 保存网页源码</p><p>​    -curl -L +url = 自动跳转页面</p><p>​    -curl -i + url = 显示response的头部消息，连同代码一起</p><p>​    -curl -v + url = 显示一次http通信的过程，请求和接收都能看见</p><p>​    -curl –trace(–trace-ascii) [文件名] url = 更详细的通信过程</p><p>​    -curl url/表单内容 = 使用GET方法发送表单</p><p>​    -curl -X POST(–data-urlencode) –data + “数据” + url = 使用POST方法发送，注意数据要和url分开。 (可以让curl帮忙编码未编码的表单)(curl默认的http动词是get，所有要使用别的时，要在前面加上 -X)</p><p>​    -curl –form upload=@本地文件名 –form press=OK [url] = 从文件上传表单</p><form method="POST" enctype='multipart/form-data' action="upload.cgi">　　　　<input type=file name=upload>　　　　<input type=submit name=press value="OK"></form><p>​    -curl –referer + url = 在response头部信息中，提供一个Referer字段，表示是从哪里跳转过来的。</p><p>​    -curl –user-agent “[user agent]” [url]  = 表示客户端的设备信息。服务器会根据不同的设备，返回不同格式的网页。</p><p>​    -curl –cookie “name=xxx” url = 可以发送cookie</p><p>​    -curl –header “头部内容” + url = 在请求头中自行增加一个头信息。</p><p>​    -curl –user name:password + url = 需要进行http认证的时候。</p><p>详细参考表：<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-curl-command line url viewer。一个命令行工具。发出网络请求，然后得到和提取数据。&lt;/p&gt;
&lt;p&gt;-使用：&lt;/p&gt;
&lt;p&gt;​    -curl + url =直接显示网页源码&lt;/p&gt;
&lt;p&gt;​    -curl -o [文件名] +url = 保</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>md常用语法总结</title>
    <link href="http://yoursite.com/2020/08/25/archives/other/md%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/md%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>##<center>md是什么</center></p><hr><p>&nbsp;&nbsp;md是一种Markdown文件使用的编写语言，轻量级，学习成本中等，但是熟练使用之后会胜过一切文档书写工具。而且md支持书写html和css书写，可以更方便对文章内容的控制。所以，md和博客在一起更配哦~</p><p>##<center>使用频度高的</center></p><hr><p>#####标题类：</p><ul><li><p>标题大小 : 使用# – 从1个到6个，表示标题的大小。</p><blockquote><p>ex : ###三级标题 =&gt; 等价于html中的&lt;h3&gt;标题。</p></blockquote></li><li><p>标题下的分割线：使3个及以上的- , _ , * , 都是可以的。</p></li><li><p>标题居中：把标题框在&lt;center&gt;中</p></li><li><p>标题改颜色,大小：给标题添加&lt;font color=’’ size=’’&gt;</p></li></ul><p>#####文本类：</p><ul><li>加入一个列表： <ul><li>无序列表：+ ，*，- 都可以用来表示无序列表。3个都是一个圆点，可以嵌套使用。</li><li>有序列表：1：2：等数字可以用来表示有序列表。</li></ul></li></ul><p><strong><em>！</em></strong> 一定符号后加一个空格，小圆点才能出来。</p><ul><li><p>加链接：[名字]（url）: 可以建立连接，无论是去别的网站，或是跳去自己别的文章都是可以的。（url的路劲每个人都是不一样的哦）</p><ul><li>跳转去内部连接</li><li>跳转去外部连接,可以使用连接，也可以使用&lt;a&gt;标签 这样可以给标签添加一个_blank。<blockquote><p>ex1 : [去看看git](](../git/git基础操作.md) <a href="../git/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C.md">去看看git</a><br>ex2 : &lt;a href=’<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a> target=’_blank’ &gt;百度&lt;/a&gt;   <a href='http://www.baidu.com' target='_blank' >百度</a></p></blockquote></li></ul></li><li><p>加入代码：使用点 `（esc下面的那个）来把代码块框起来。少代码1个，多代码3个。</p><blockquote><p>ex : `var a = 0; `  =&gt;  <code>var a = 0;</code></p></blockquote></li><li><p>加入图片：![图片名]  (url) 表示一个图片</p></li><li><p>字体加重：使用* , _ , 加重字体。1~3个，加重的情感不同。（还是有点不一样的对吧）</p><blockquote><p>ex : *加重* =&gt; <em>加重</em><br>ex : **加重** =&gt; <strong>加重</strong><br>ex : ***加重*** =&gt; <strong><em>加重</em></strong></p></blockquote></li><li><p>文字下划线：使用&lt;u&gt;添加下划线。</p><blockquote><p>ex : &lt;u&gt;加下划线&lt;/u&gt; =&gt; <u>加下划线</u></p></blockquote></li><li><p>引用或加例子：使用&gt;来表示一个区块，可以多个连用。依次递增表示嵌套。</p></li><li><p>加上空格：md不支持直接空格，可使用&amp;nbsp;一个就是一个空格。</p></li><li><p>加上转移字符：md中使用了很多的符号，只想让符号显示怎么办？在符号前加上\（转义字符）就好啦。</p></li><li><p>删除线：使用~~将想要删除的内容框起来</p><blockquote><p>ex : ~~ 删除 ~~  =&gt; <del>删除</del></p></blockquote></li></ul><p>##<center>使用频度低的</center></p><hr><p>#####公式类：（以后用到了再总结哈）<br>#####表格类：</p><p>##<center>Typora的快捷键</center></p><hr><p>#####关于Typora：<br>&nbsp;&nbsp;最开始时我觉得md语法不方便，就是使用Typora来写的。(主要是懒得记那些指令)优点是方便，界面干净，还有很多快捷键，只需要去记住快捷键就行。缺点就是，因为写起来太过流畅，会不注意很多的书写细节(主要是符号方面的)这样在启动hexo项目的时候就会出现渲染上的错误。<br>#####快捷键：</p><ul><li><p>cmd+b 加粗</p></li><li><p>cmd+i 斜体</p></li><li><p>cmd+u 下划线</p></li><li><p>cmd+k 超链接</p></li><li><p>cmd+数字  标题级数</p></li><li><p>crl+` 代码块</p></li><li><p>crl+- 和html一样的注释</p></li></ul><hr><center>--未完待续--</center>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##&lt;center&gt;md是什么&lt;/center&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;md是一种Markdown文件使用的编写语言，轻量级，学习成本中等，但是熟练使用之后会胜过一切文档书写工具。而且md支持书写html和css书写，可以更方便对文章内容的控制。所</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>npm学习总结</title>
    <link href="http://yoursite.com/2020/08/25/archives/other/npm%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/npm%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm学习总结"><a href="#npm学习总结" class="headerlink" title="npm学习总结"></a>npm学习总结</h3><h4 id="一些指令："><a href="#一些指令：" class="headerlink" title="-一些指令："></a>-一些指令：</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="-初始化:"></a>-初始化:</h5><p>​        -npm init  npm init -y (自动生成package.json)—npm i。npm i express 可以一次安装多个包。</p><p>​        -npm i -g pkg：在全局安装包。</p><p>​        -npm i -S(–save) pkg：安装包作为依赖。–dep</p><p>​        -npm i -D(–save-dev pkg):安装包作为开发依赖。–devD</p><p>​        -npm config set —初始化默认配置。还可以配置其他的源来安装js包。使用不同团队的东西之前要注意切换set的地址。<code>npm set registry http://registry-npm.firstshare.cn</code></p><p>​            -npm config ls -l—查看npm内部的默认配置参数。</p><p>​        -npm preinstall–客户无感知安装。 项目的 <code>package.json</code> 里增加 <code>preinstall</code> 要执行的脚本，这样合作方可以无感知的安装。</p><p>​        -npm ci—全新的安装包，对package-lock.json友好。</p><h5 id="运行测试："><a href="#运行测试：" class="headerlink" title="-运行测试："></a>-运行测试：</h5><p>​        -npm test（t）—</p><h5 id="查看项目中可用脚本："><a href="#查看项目中可用脚本：" class="headerlink" title="-查看项目中可用脚本："></a>-查看项目中可用脚本：</h5><p>​        -cat package.json</p><h5 id="npm-scripts："><a href="#npm-scripts：" class="headerlink" title="-npm scripts："></a>-npm scripts：</h5><p>​        -作用：预定义前后钩子，自定义脚本。</p><p>​        -npm run env：列出项目中所有的npm环境变量</p><h5 id="删除重复的包："><a href="#删除重复的包：" class="headerlink" title="-删除重复的包："></a>-删除重复的包：</h5><p>​        -npm dedupe(ddp)—删除重复的依赖项。</p><h5 id="扫描应用程序中的漏洞："><a href="#扫描应用程序中的漏洞：" class="headerlink" title="-扫描应用程序中的漏洞："></a>-扫描应用程序中的漏洞：</h5><p>​        -npm audit —扫描项目中的任何依赖中的任何漏洞。npm audit fix 会自动安装所有漏洞包的补丁版本。</p><h5 id="本地测试你的软件包："><a href="#本地测试你的软件包：" class="headerlink" title="-本地测试你的软件包："></a>-本地测试你的软件包：</h5><p>​        -npm link (模块名)：实现任意位置的npm模块命令的全局可执行。（不加模块名则是开发一个全局的模块。）</p><h5 id="列出所有已安装的软件包："><a href="#列出所有已安装的软件包：" class="headerlink" title="-列出所有已安装的软件包："></a>-列出所有已安装的软件包：</h5><p>​        -npm list（ls）—加depth=1可以限制搜索深度。</p><h5 id="拓展nrm"><a href="#拓展nrm" class="headerlink" title="-拓展nrm:"></a>-拓展nrm:</h5><p>​            -nrm ls—查看已有的npm</p><p>​            -nrm add 源名称 url—添加相关源</p><p>​            -nrm del 源名称—删除相关源</p><p>​            -nrm use 源名称—切换相关源</p><p>​            -nrm test —测试源速度</p><h4 id="工程上使用到npm的地方："><a href="#工程上使用到npm的地方：" class="headerlink" title="-工程上使用到npm的地方："></a>-工程上使用到npm的地方：</h4><p>​    -node_modules目录：每个包都会将该包的依赖安装到当前包所在的<code>node_modules</code>目录中。（包要使用的依赖都会安装在里面。）从npm5.x增加了package-lock.json</p><p>​    -package-lock.json的详细描述主要由version、resolved、integrity、dev、requires、dependencies这几个字段构成：</p><p>​        -version—版本</p><p>​        -resolved—安装源</p><p>​        -interity—表明包完整性的hash值（验证包是否失效）</p><p>​        -dev—如果为true，则此依赖关系仅是顶级模块的开发依赖关系或者是一个的传递依赖关系</p><p>​        -requires—依赖包所需要的所有依赖项，对应依赖包<code>package.json</code>里<code>dependencies</code>中的依赖项。</p><p>​        -dependencies—依赖包<code>node_modules</code>中依赖的包，与顶层的<code>dependencies</code>一样的结构</p><h4 id="拓展—package-json中的配置："><a href="#拓展—package-json中的配置：" class="headerlink" title="拓展—package.json中的配置："></a>拓展—package.json中的配置：</h4><p>​    -scripts：存放一些npm run xx相关的指令。会告诉你指令相关运行时什么。也可以自定义脚本命令。（npm run有串行&amp;&amp;和并行&amp;两种）执行相应命令时都会执行Pro/post钩子函数。钩子函数中定义了命令执行前后的命令。</p><p>​    -dependencies：基本依赖，写在一个简单的对象中，将依赖程序包映射到版本范围。(就是项目在线上运行时所要使用到的依赖。）</p><p>​    -devDependencies：是开发时所要使用到的依赖，在线上时并不需要他们。</p><p>​        -包含什么：构建工具（webpack相关:为了生成生成环境代码。线上使用的代码是他们的工作结果）预处理器（css的相关预编译器，js中的ts，coffee-script，babel等）测试工具（chai，e2e等）其他（webpack-dev-server 支持开发热加载，线上是不用的。等这样的东西。）</p><p>​    -peerDependencies、bundleDependencies、optionalDependencies：作为npm包的发布者需要考虑使用的。后面再讲。</p><p>​    -注意版本号前的^和~：前者被优先考虑，是会把当前库中的最新版本更新到当前使用的最新版本。比如3.3.4，库会匹配3.x中的最新版本。（作用于版本号的第一个值）后者则是作用域版本号的中间的号。比如3.3.4，库会匹配3.3.x中最新版本。</p><p>/*注：babel-runtime 是 dependencies 而不是 devDependencies。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;npm学习总结&quot;&gt;&lt;a href=&quot;#npm学习总结&quot; class=&quot;headerlink&quot; title=&quot;npm学习总结&quot;&gt;&lt;/a&gt;npm学习总结&lt;/h3&gt;&lt;h4 id=&quot;一些指令：&quot;&gt;&lt;a href=&quot;#一些指令：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/25/archives/other/%E6%8A%93%E5%8C%85,%E9%80%A0%E5%81%87%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/%E6%8A%93%E5%8C%85,%E9%80%A0%E5%81%87%E6%95%B0%E6%8D%AE/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>目的，想要在手机端调试制作的页面，但是本地取不到后端数据，或者是后端的数据还没有，但是我们又想要有数据来测试我们做的页面有了数据之后是什么样。。、。。大多数都是使用在移动端开发<br>这种时候就可以自己造一个.json格式的假数据，然后使用抓包工具，在请求的那个接口中将假数据加进去来验证。<br>工具：Charles 除了将自己设置成系统的网络访问代理服务器，所有的网络请求都可以通过它完成。还可以用于分析第三方应用的通讯协议。<br>主要功能：截取 Http 和 Https 网络封包。<br>支持重发网络请求，方便后端调试。<br>支持修改网络请求参数。在一个接口处，右键，选择edit从中就可以选择修改我们的包括 URL 地址、端口、参数等，之后点击 “Execute” 即可发送该修改后的网络请求，还可以从add中选取我们创建的.json然后发送<br>给服务器做压力测试，在请求的接口处右键，选择repeat advanced 然后可以选择打压的并打线程数，及打压次数。<br>支持网络请求的截获并动态修改。<br>支持模拟慢速网络。选择proxy-》throttle setting项，选上enable后就可以设置网速</p><p>步骤：造一些假数据-&gt;放在一个.json文件中-&gt;使用抓包工具将假数据加入想要放数据的接口中-&gt;然后刷新时就可以使用伪造的假数据啦&gt;&gt;&gt;&gt;&gt;</p><p>设置proxy -&gt;Mac osx proxy将charles设置为代理-&gt; 有两个视图，分别按Structure域名和Sequence时间分类-&gt;相应内容是json格式，那么会自动将json格式化-&gt;&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目的，想要在手机端调试制作的页面，但是本地取不到后端数据，或者是后端的数据还没有，但是我们又想要有数据来测试我们做的页面有了数据之后是什么样。。、。。大多数都是使用在移动端开发&lt;br&gt;这种时候就可以自己造一个.json格式的假数据，然后使用抓包工具，在请求的那个接口中将假数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chrome调试技巧</title>
    <link href="http://yoursite.com/2020/08/25/archives/other/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chrome调试技巧："><a href="#Chrome调试技巧：" class="headerlink" title="Chrome调试技巧："></a>Chrome调试技巧：</h3><p>​    1：command+option+i 快捷键打开。三点调控制台位置。有可以快速切换pc和手机端的按钮，edit可以自定义设备。</p><p>​    2：控制台中 elements（元素）可以用来控制整体的布局，右键的一些功能可以直接从控制台写html。</p><p>​    3：元素状态改变的监控方法。break on里的subtree</p><p>​    4:可以通过在一个区域右键-检查来快速找到相应的样式，并修改。</p><p>​    5:elements可以直接通过相应的盒子，来改变盒模型大小。computed来查看当前盒子上所有的css样式。</p><p>​    6：可以通过eventlistener来快速查找有事件的dom节点在哪里。</p><p>​    7：console-控制台。可以用来显示一些调试的信息.可以用来简单检查一段js代码有没有错误。控制台日志可保存。</p><p>​    8：本地文件使用source中的filesystem放文件，这样在style中该样式了，文件也会自动更新。如果是线上文件则是在network文件夹中修改。</p><p>​    9：network用来抓包，看网络性能。和文件加载过程。（网络请求面板）disable cache 勾选后，所有的资源不会使用cache中已经下载好的，而是全部重新下载。</p><p>​    10：页面重绘，三小点-more tools-rendering。</p><p>​    11：more tools中的coverage可以筛选出没有被使用到的代码，红色部分就是没有被用到的，通过这个可以做出一些页面的优化。</p><p>​    12：页面动画调试监控。animations来调节动画效果。</p><p>​    13：network 可以调节不同网络下的页面显示状况，还可以通过user agent来在不同设备下显示页面的状况。</p><p>​    14：request block 让浏览器阻止一些请求资源，可以用来阻止广告。。。</p><p>​    15：search用来查找全局的资源。</p><p>​    16：后端要查数据所需要的curl可以在接口处右键copy中取得</p><p>-调用后台接口传过来的数据，可以通过控制台的network查看传输的数据的情况，成功或失败， 主要还是看XHR(XMLHttpRequst对象，向服务器发送请求)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Chrome调试技巧：&quot;&gt;&lt;a href=&quot;#Chrome调试技巧：&quot; class=&quot;headerlink&quot; title=&quot;Chrome调试技巧：&quot;&gt;&lt;/a&gt;Chrome调试技巧：&lt;/h3&gt;&lt;p&gt;​    1：command+option+i 快捷键打开。三点调控</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>项目中的记录和感想</title>
    <link href="http://yoursite.com/2020/08/25/archives/other/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84/"/>
    <id>http://yoursite.com/2020/08/25/archives/other/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>-confirm(message) 方法用于显示一个带有指定消息和 OK 及取消按钮的对话框。参数是要在对话框中显示的纯文本。   返回值是boolean。确定-true，取消-false</p><p>-this.getQueryParams()：获取数据</p><p>-h5项目</p><p>-vant：适合使用在移动端的轻量级ui库。需要翻墙。</p><p>-jsapi：组装好的可以直接调用的接口，适用于ios和安卓</p><p>-nummt：数字格式化命令，用于数字值的后面，将数字值标准化。</p><p>-数据中的值的变换，是根据上面的tab条切换的，切换到不同的取值不同-&gt;现在问题，如何取值。使用封装好的api.post方法调用接口。（这个方法是根据axios封装的）api.post(“接口名”，参数:参数值)=&gt;这个是想要向后端接口传递一个参数，然后通过传过去的参数的不同，后端给前端返回相应参数下的数据。=&gt;再具体的方法可以看axios的官方文档。fetch是一个api，使用了promise  语法，fetch（参数）.then(完成的回调函数).catch(失败的回调函数)</p><p>fetch（url，opts）.then((reponce)=&gt;{})</p><p>![image-20200812161512541](/Users/lilyren/Library/Application Support/typora-user-images/image-20200812161512541.png)</p><p>fetch从网络接口中请求数据，.then处理请求得到的数据 .catch处理请求失败后的回调</p><p>-一个好习惯，写一个单页面，最好不要在别人的基础上改，而是要自己写在文件夹中，然后通过import引入，这样不会污染别人的代码，自己犯错也容易修改。</p><p>页面要学会拆分成不同的组件，这样每一个部件也好拆分和重用。</p><p>-父子组件传值：</p><p>子-&gt;父：(@)1：  父组件中在相应的子组件中添加监听事件@子组件传来的值=“相应函数”  这样父组件就可以使用子组件传来的值。（相应函数就是在watch中写入“相应函数”，用来监听传过来的参数是否变化）2：子中的数据，触发原生事件，父组件定义的函数，在子中使用this.$emit(‘父组件指定的传数据绑定的函数’，this.childvalue-想要子组件给父组件传递的值) 来触发自定义的childhandle</p><p>父-&gt;子：(:)1：引入子组件。2：在父中添加子组件。3：父组件绑定自定义的属性（：自定义属性（父中的）=‘父中的数据’）爸爸要知道给儿子的东西是从哪里来的，所以命名和数据都要是自己定义的。4：子组件通过props接受父组件的传值。就可以在子组件中使用</p><p>-this.api.post:是基于axios.post封装的一个post请求 post（url，data）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">postform</span>(<span class="params">url,data = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance.post(url,data)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(response.data);</span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-watch：用来监听单个属性   watch:{selected:function(newV,oldV)}  上面导航的值可以用watch来监听，然后，可以，使用this.$router.push({name:’’})….oldV就是在newV之前的一个值  ，也可以使用this.属性名来 this.selected   this.$router.push({name:’this.selected’})</p><p>-axios:  import Axios from “./axios”   vue.prototype.$axios=Axios</p><p> Axios.defults.baseURL=”url”   用来写调用的接口之前的路径，之后，就可以直接使用axios来调取接口</p><p>发起请求是在created中发起，就是取数据的时候是放在这里的，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-confirm(message) 方法用于显示一个带有指定消息和 OK 及取消按钮的对话框。参数是要在对话框中显示的纯文本。   返回值是boolean。确定-true，取消-false&lt;/p&gt;
&lt;p&gt;-this.getQueryParams()：获取数据&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive</title>
    <link href="http://yoursite.com/2020/08/25/archives/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/25/archives/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>保持页面现在的状态，跳出去后，回来还是这个状态<br><keep-alive> 可以在里面加v-if来判断哪个是他想要包活的路由页面是哪个<br><keep-alive ><br>            <router-view v-if='$route.meta.keepAlive'></router-view><br>        </keep-alive></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;保持页面现在的状态，跳出去后，回来还是这个状态&lt;br&gt;&lt;keep-alive&gt; 可以在里面加v-if来判断哪个是他想要包活的路由页面是哪个&lt;br&gt;&lt;keep-alive &gt;&lt;br&gt;            &lt;router-view v-if=&#39;$route.meta.keep</summary>
      
    
    
    
    
    <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS大字典</title>
    <link href="http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/CSS%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/CSS%E5%9F%BA%E7%A1%80/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<p>常用属性：</p><p>​    -color</p><p>​        transparent：透明</p><p>​    -opacity</p><p>​    -font–大小/行高 字体</p><p>​        -font-style：文本斜体</p><p>​        -font-weight：设置文本的粗细</p><p>​        -font-size：字体大小</p><p>​        -font-family：字体种类</p><p>-文本属性：</p><p>​    -white-space-文字空白处的处理</p><p>​    -direction-文本的方向</p><p>​    -text-align-水平对齐方式</p><p>​    -line-height-文本行高</p><p>​    -vertical-align-文本所在行高的垂直对齐方式</p><p>​    -text-indent-文本缩进</p><p>​    -letter-spacing-字母间的空白</p><p>​    -word-spacing-单词间的空白</p><p>​    -text-transform-文本的大小写</p><p>​    -text-overflow-文本溢出样式</p><p>​    -text-decoration-文本的装饰</p><p>​    -word-wrap-自动换行</p><p>-背景属性:</p><p>​    -background-image:</p><p>​    -background-position:</p><p>​    -background-repeat:</p><p>​    –background</p><p>-z-index：仅在定位元素上有效，position</p><p>布局：    </p><p>-flex布局：对div这种块级元素 设置display：flex   对于span这种行内元素，设置display：inline-flex；</p><p>​    -一些属性：flex-direction-盒子的排列方向，flex-wrap-控制是否换行（这两个可以合并使用一个flex-flow）justify-content-盒子内元素在横轴方向上的对齐方式，align-items-多行的flex容器，在纵轴上的对齐方式（这两个可以合并使用一个align-contant）</p><p>​    -flex项目属性(对一个小格子的控制)：order：数字-用来个盒子进行编号。flex-grow：默认值是0，多余空间不分配。flex-shrink：默认值是1，空间不足要分配。他两的作用：项目在多余的空间中如何放大缩小。flex-basis：默认值是auto，指定项目的初始大小。(在一个flex中可以设置前面三个值。) align-self：控制单个项目沿着纵轴上的方向。</p><p>​    -上面三个属性的默认值就是说，一个flex在改变屏幕扩大时不会缩小，扩大时会扩大，但是以上操作都是可auto调节的。</p><p>​    -盒子的尺寸优先级是：最大最小尺寸限制(min-width/max-width) &gt; 弹性增长或收缩 (flex-grow/flex-shrink)&gt; 基础尺寸(flex-base/width/box-sizing共同决定)。*但是在flex布局中，flex-basis的优先级比width高。值都会把width的值覆盖。flex-basis和width在缩小时效果是相同的，但是如果是扩大的话，width就是固定的了，不会是可以拉伸的。</p><p>在contant-box上 flex-basis和width的作用是一样的，如果设置成border-box的话，用width就会缩小。</p><p>​    -父元素display：flex </p><p>​        -子元素flex:auto 这样设置的相应的块就会自动拉伸占满一条屏幕。</p><p>​        -flex:none 就会撑爆整条屏幕。</p><p>-grid布局：设置display：grid</p><p>​    -属性：grid-template-columns-一个grid的横向上的宽，grid-template-rows-竖向上的高，(可以随意的控制格子的大小)。 grid-column-以竖向划分。如果是3*3的区域，那么column的数量就有4个，grid的竖向对个格子的大小进行划分，从start开始，到end结束，(1/4–从第一根开始到第四根结束。)grid-row-以横向划分，其余均同上。</p><h5 id="预处理语言-less："><a href="#预处理语言-less：" class="headerlink" title="预处理语言-less："></a>预处理语言-less：</h5><p>-在vue框架中添加scoped属性，表示该style标签所包含的样式仅仅作用于当前的vue组件，这样不会产生样式的全局污染。lang标签则是规定了使用哪种css预处理语言。</p><p>-初始起步：</p><p>​    -less的安装：npm install <a href="mailto:&#108;&#x65;&#x73;&#x73;&#45;&#x6c;&#x6f;&#x61;&#100;&#101;&#114;&#x40;&#x34;&#x2e;&#x31;&#46;&#48;">&#108;&#x65;&#x73;&#x73;&#45;&#x6c;&#x6f;&#x61;&#100;&#101;&#114;&#x40;&#x34;&#x2e;&#x31;&#46;&#48;</a> –save(less的版本过高会出现问题，vue项目就无法启动) 安装后使用 lessc-v 检查是否安装成功。</p><p>​    -less的引用：普通使用：将官网中的说明引入即可。vue项目中：import less from ’less‘  vue.use(less);   style设置lang=’less‘。</p><p>-less在css语言的基础上增加了，变量，混合(mixin)，函数等功能。</p><p>-格式：@变量名：值</p><p>-混合：将一组属性从一个规则集包含到另一个规则集中。.class{style…}  使用–.class1{ style… ;  .class(); }，这样，class1就可以使用class的样式。</p><p>​    可以将伪选择器和混入一起使用。.class{ style…  &amp;:after{  } }(&amp;表示当前选择器的父级)</p><p><code>.clearfix &#123;  display: block;  zoom: 1;   &amp;:after &#123;    content: &quot; &quot;;    display: block;    font-size: 0;    height: 0;    clear: both;    visibility: hidden;  &#125; &#125;</code></p><p>-嵌套：就是把可以复用的样式写在一起，格式—#最外层的块{ 样式… .下面的class{ class自己的样式 }} *注意：嵌套是采用冒泡的方式，就是内层会被外层所影响。</p><p>​    @规则可以和选择器以相同的方式进行嵌套</p><p><code>.component &#123;  width: 300px;  @media (min-width: 768px) &#123;    width: 600px;    @media  (min-resolution: 192dpi) &#123;      background-image: url(/img/retina2x.png);    &#125;  &#125;  @media (min-width: 1280px) &#123;    width: 800px;  &#125; &#125;</code></p><p>-运算&amp;函数：运算–可以做四则，属性和颜色的运算。calc()不进行运算，但在嵌套函数中，会计算变量和数学公式的值。？？？</p><p>-转义：允许你使用任意字符串作为属性或变量值。格式—@变量名：~“字符串”，编译后都会原样输出。</p><p>-命名空间和访问符：在写的一个class中，嵌套着他所要使用的伪类 .class{ … &amp;:after{ … }}(&amp;-就是class的名字)</p><p>-映射：(很有意思)可以将混合和规则集作为一组值的映射</p><p><code>\#colors() &#123;  primary: blue;  secondary: green; &#125; .button &#123;  color: #colors[primary];  border: 1px solid #colors[secondary]; &#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用属性：&lt;/p&gt;
&lt;p&gt;​    -color&lt;/p&gt;
&lt;p&gt;​        transparent：透明&lt;/p&gt;
&lt;p&gt;​    -opacity&lt;/p&gt;
&lt;p&gt;​    -font–大小/行高 字体&lt;/p&gt;
&lt;p&gt;​        -font-style：文本斜体&lt;</summary>
      
    
    
    
    
    <category term="前端三兄弟" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>DOM和BOM</title>
    <link href="http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/dom%E5%92%8Cbom/"/>
    <id>http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/dom%E5%92%8Cbom/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="dom：HTML和XML的应用程序接口"><a href="#dom：HTML和XML的应用程序接口" class="headerlink" title="dom：HTML和XML的应用程序接口"></a>dom：HTML和XML的应用程序接口</h4><p>-用来实现页面的动态交互效果。html的每一个标签都能成为dom的一个节点。</p><p>​    -节点分类：-文档<del>：文档本身。-元素</del>：所有的html元素。-属性<del>：html元素内的属性。-文本</del>：元素内的文本。-注释~：html中的注释。</p><p>-获取元素：</p><p><code>document.getElementById(&#39;xxx&#39;) //通过Id来获取对象，后面的都是数组    document.getElementsByTagName(&#39;div&#39;)[0] //通过标签名获取(获取第1个div标签) document.getElementsClassName(&#39;red&#39;)[0] //获取第1个class=&#39;red&#39;的元素</code></p><p>（上面方法在兼容IE的情况下再使用）</p><p><code>document.querySelector(&#39;&#39;) //获取元素(第一个遇到的)     document.querySelectorAll(&#39;div&#39;) //获取所有含有div的元素         document.querySelectorAll(&#39;div&#39;)[0] //获取第一个div标签</code></p><p>（常用的）</p><p>-新增节点：</p><p><code>document.createElement()//标签节点</code></p><p><code>document.createTextNode()//文本节点</code></p><p><code>div1.appendChild(text1)      div1.innerText = &#39;你好&#39;    div1.textContent = &#39;你好&#39;//将文本节点插入到元素中去。</code></p><p><code>document.body.appendChild(div1)     div1.appendChild(text1)//将在页面中的元素插到页面中。</code></p><p><code>let text2 = text1.cloneNode.call(text1,true)//true-深拷贝，false-浅拷贝。</code>//拷贝的原因是节点只能被添加一次，不能重复使用，如果想要重复使用就要拷贝。</p><p>-获取属性：dom对象.属性=“xxx”</p><p>-删除节点：</p><p>div.parentNode.removeChild(div1) //从树种删除节点</p><p>-改属性：</p><p>div.className //修改class</p><p>div.style//修改style</p><p>div.dataset//?</p><p>-修改节点：</p><p>​    -appendChild()//指定节点的最后一个节点列表后添加一个新的子节点</p><p>​    -insertBefore()//将一个给定节点插入到一个给定元素节点的给定子节点的前面</p><p>​    -removeChild()//从一个给定元素中删除子节点</p><p>​    -replaceChild()//把一个给定父元素里的一个子节点替换为另外一个节点</p><p>-访问节点：</p><p>​    -<code>document.documentElement //获取html元素</code></p><p>​    -<code>document.head //获取head元素</code></p><p>​    -<code>document.body //获取body元素</code></p><pre><code> -`window //获取窗口，可通过`</code></pre><p>​    -<code>window.onclick 对窗口进行监听</code> </p><p>​    -<code>document.all //获取所有的标签</code></p><p>-node节点的特性和方法：</p><p>​    -firstChild //获取第一个子节点</p><p>​    -lastChild//获取最后一个子节点</p><p>​    -parentNode//指向父节点</p><p>​    -ownerDocument//指向这个节点所属的文档</p><p>​    -childNodes//所有子节点列表</p><p>​    -hasChildNodes() //Boolean，当childNodes包含一个或多个节点时，返回真值</p><p>-dom事件：    </p><p>​    -冒泡事件：从内向外</p><p>​    -捕获事件：从外向内</p><p>​    -阻止冒泡：</p><p>​        -event.stopPropagation()    event.stopImmediatePropagtion()–阻止剩下的事件处理程序被执行</p><p>​        -preventDefault()–</p><p>​        -innerText–表示起始标签和结束标签之间的文本、innerHTML–表示元素的所有元素和文本的HTML代码、outerText–替换的是整个目标节点，返回的和innerText相同、outerHTML–同上</p><p>​    -事件监听函数：</p><p>​        -oDiv.onclick = function(){}//默认冒泡</p><p>​        -attachEvent() ，detachEvent()//在IE中使用？//都有两个参数–事件动作，回调函数。//在使用attachEvent()方法中，事件处理程序会在全局作用域中运行。</p><p>​        -addEventListener()和removeEventListener()//用来分配和移除事件处理函数//三个参数：事件名称，要分配的函数，事件阶段是在什么阶段。</p><p>​        -addHandler()，removeHandler()//跨浏览器的事件处理程序//addHandler()方法属于一个叫EventUntil()的对象，这两个方法均接受三个相同的参数，要操作的元素，事件名称和回调函数。</p><p>-事件类型：(在前面加上了on-就变为了一个事件处理程序)</p><p>​    -鼠标~：click-点击、dbclick-双击、mousedown-鼠标按下、mouseup-鼠标抬起、mouseover-鼠标移上、mouseout-鼠标移开、mousemove-鼠标移动</p><p>​    -键盘~：keydown-按键按下的过程、keypress-键被按下、keyup-按键松开</p><p>​    -HTML~：load-加载、abort-中途停止ajax请求、select-添加/触发select事件、change-添加/触发 change 事件、submit-添加/触发 submit 事件、 resize-添加/触发 resize 事件、scroll-添加/触发scroll 事件、focus-元素聚焦、blur-元素失焦</p><p>​    </p><h4 id="Bom-用于处理浏览器窗口和框架。"><a href="#Bom-用于处理浏览器窗口和框架。" class="headerlink" title="Bom:用于处理浏览器窗口和框架。"></a>Bom:用于处理浏览器窗口和框架。</h4><p>-就是对浏览器的一些window窗口的操作的一些控制。</p><p>-bom对象方法：alert()-弹出警示,confirm()-确认框，返回boolean值，prompt()-输入框，返回提示框中的值，方法可以调用系统对话框向用户显示消息。</p><p>-bom对象：</p><p>​    -navigator：导航器对象，控制一些浏览器信息</p><p>​        -appCodeName：返回浏览器的代码名</p><p>​        -appName：浏览器名称    </p><p>​        -appVersion：浏览器的平台和版本信息</p><p>​        -cookieEnabled：指明浏览器中是否启用cookie的布尔值</p><p>​        -platform：运行浏览器的操作系统平台</p><p>​        -userAgent：返回由客户机发送服务的user-agent头部的值</p><p>​    -screen：显示器对象</p><p>​        -availHeight：显示屏幕可用高度</p><p>​        -availWidth：显示屏幕可用宽度</p><p>​        -height：屏幕的像素高度</p><p>​        -width：屏幕的像素宽度</p><p>​        -colorDepth：屏幕颜色位数</p><p>​    -history：历史对象，包含用户访问过的URL。</p><p>​        -back():加载前一个url</p><p>​        -forward：加载下一个url</p><p>​        -go(num)：加载url表中相应的位置，-1-上一个url</p><p>​    -location：与当前窗口加载的文档相关的信息。</p><p>​        -属性</p><p>​            -hash：设置或返回从#开始的url</p><p>​            -search：从？开始的url</p><p>​            -host：主机名和当前的url的端口号</p><p>​            -hostname：主机名</p><p>​            -port：端口号</p><p>​            -pathname：路径</p><p>​            -protocol：当前url的协议</p><p>​            -href：设置或返回完整的url</p><p>​        -方法</p><p>​            -assign(url)：加载新文档</p><p>​            -reload：重新加载当前文档</p><p>​            -replace：用新的文档代替当前文档</p><p>​    -document：文档对象</p><p>​            -方法：</p><p>​                -open：打开新的，擦除旧的</p><p>​                -close：关闭文档输出流</p><p>​                -write：向当前文档追加写入文本</p><p>​                -writeIn：同上，但会换行</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://p.ssl.qhimg.com/t016c684c2c50e6468a.gif" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;dom：HTML和XML的应用程序接口&quot;&gt;&lt;a href=&quot;#dom：HTML和XML的应用程序接口&quot; class=&quot;headerlink&quot; title=&quot;dom：HTML和XML的应用程序接口&quot;&gt;&lt;/a&gt;dom：HTML和XML的应用程序接口&lt;/h4&gt;&lt;p&gt;-用</summary>
      
    
    
    
    
    <category term="前端三兄弟" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS数据结构</title>
    <link href="http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/08/25/archives/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h2><h5 id="方法："><a href="#方法：" class="headerlink" title="-方法："></a>-方法：</h5><p>-数组迭代：</p><p>​    -every(过滤器函数):迭代数组中的每一个函数，直到出现false。</p><p>​    -some:同every相反，直到返回true。</p><p>​    -forEach():和使用for相同。    </p><p>​    -map():创建了新数组，每一个都迭代</p><p>​    -filter():创建新数组，只存放返回值是true的那个。</p><p>-数组缩小：</p><p>​    -reduce(function(preV,curV,idx,arr)):内部函数会返回一个叠加到累加器的值。常用于数组所有元素求和。</p><p>​    -reduceRight():从最后一项到第一项</p><p>-数组转换：</p><p>​    -array.toString():</p><p>​    -array.valueOf:将数组作为字符串返回。</p><p>​    -array.join(不同连接符):将数组元素连接成串。</p><p>-数组的栈方法:(用来操作队列尾部)</p><p>​    -array.push():移入队尾</p><p>​    -array.pop():删除队尾</p><p>-数组的队列方法:(用来操作数组的头部，来模拟队列)</p><p>​    -array.push():推入队尾</p><p>​    -array.shift():将数组第一个值移除。</p><p>​    -array.unshift():将数组第一个值加入。可以用来模拟反向队列。</p><p>-数组重排序方法：</p><p>​    -array.reverse():只能翻转</p><p>​    -array.sort(比较函数):通常结合比较函数一起使用。</p><p>-数组操作方法：</p><p>​    -array.concat(array)–拼接，创建一个新数组</p><p>​    -array.slice(start,end):分割，返回分割后的数组，不会影响原数组。</p><p>​    -array.splice(index,number)/(start,end,添加的元素):可以删除，插入，替换。是功能最强大的数组方法。</p><p>-数组位置方法：</p><p>​    -array.indexOf(index,查找起点):输出与搜索值相同的第一个值的索引。</p><p>​    -array.lastIndexOf(同上)：</p><h5 id="Data类型："><a href="#Data类型：" class="headerlink" title="-Data类型："></a>-Data类型：</h5><p><code>Var now = new Data();</code> 在不传参的情况下，直接获取当前时间（系统还是本地？）</p><p>-Data.parse(data string)：会将字符串转换成日期。但不同浏览器的解析不同。</p><p>-Data.now():返回当前时间的毫秒数。在不支持使用的浏览器中，可以使用+new 把对象转换成字符串。</p><p>-toUTCString():实现特定于实现的格式显示时分秒 ？？？</p><h5 id="RegExp类型："><a href="#RegExp类型：" class="headerlink" title="-RegExp类型："></a>-RegExp类型：</h5><p>-用来支持正则表达式（就是为了查找使用的），<code>var expression = / pattern / flags</code> </p><p>pattern-正则表达式。flags-标识，有g(全局模式，模式被使用于所有字符串),i（不区分大小写）,m（多行模式）</p><p>-实例属性：regexp.global/ignoreCase/multiline-布尔，看是否设置了g，i，m .lastIndex-整数，开始搜索下一个匹配项的字符位置,source-正则的字符串表达式。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组：&quot;&gt;&lt;a href=&quot;#数组：&quot; class=&quot;headerlink&quot; title=&quot;数组：&quot;&gt;&lt;/a&gt;数组：&lt;/h2&gt;&lt;h5 id=&quot;方法：&quot;&gt;&lt;a href=&quot;#方法：&quot; class=&quot;headerlink&quot; title=&quot;-方法：&quot;&gt;&lt;/a&gt;-方法：&lt;</summary>
      
    
    
    
    
    <category term="前端三兄弟" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/2020/08/25/archives/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/25/archives/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/vue%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-25T06:23:29.537Z</published>
    <updated>2020-08-25T06:23:29.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue学习"><a href="#vue学习" class="headerlink" title="vue学习:"></a>vue学习:</h4><h5 id="基本知识："><a href="#基本知识：" class="headerlink" title="基本知识："></a>基本知识：</h5><p>​        -<code>\&#123;&#123;\&#125;&#125;</code>—文本或数据显示的地方，里面只运行js代码，纯js代码也可以运行。</p><pre><code>     -标签有的指令： </code></pre><p>​                 -v-html—可以显示数据中带有标签的，标签内的部分部分。标签内按照样式显示。</p><p>​                 -v-text—把标签也输出，也没有相应的标签效果。</p><p>​        -v-show=”定义的值“ 值是布尔值 控制一个值的隐藏或显示  。相当于是将相应的display：none。如果需要频繁的切换，使用v-show</p><p>​        - v-if=”定义的值“ 值时boolean 节点的动态创建和删除。相当于是dom中的appendChild（） removeChild（）如果运行时条件很少变换，则使用v-if</p><p>​                -动态切换class的方式，三目写法，对象写法，数组写法（可以任意的切换）    </p><p>​                -v-bind=‘值’ 动态切换class （isActive？‘red’：‘yellow’）buttom中写@click=‘handleClick（）’ 然后在methods中写入click的方法。 <strong>bind和click要结合使用</strong></p><pre><code>      -列表渲染：v-for 循环渲染数据。有index，key值            -key:必要值。跟踪每个节点的身份，重用和重新排序现有的元素。key=&quot;data.id&quot; //理想的key值，每一项都有id</code></pre><p>​                -v-for，在数组中结合computed/methods计算来控制数组数据的变换。</p><p>​        -传值：使用prop将数据传输到组件中。（尝试自己写组件TODOlist）</p><p>​        数组更新检测：</p><p>​            1：使用一下方法操作数组，可以检测变动。</p><p>​                push，pop，shift，unshift，splice，sort，reverse</p><p>​            2：新数组替换老数组。</p><p>​                filter，concat，slice，map</p><p>​    -在组件中：data必须是一个函数，template优先级比较高，数据驱动视图</p><p>​    事件处理：</p><p>​        1：@click=”事件“（函数写不写括号，主要是要看需不需要传输数据。）在methods中写响应事件所对应的方法（函数），然后当监听到事件发生改变时就可以运行了。</p><p>​        2：click会产生冒泡现象，所以原生使用stoPropogation来阻止。vue中有.stop的事件修饰符，用来阻止冒泡。.prevent阻止事件跳转。.self事件只有自己才可以触发。.once只能执行一次的事件修饰符。   </p><p>​        3：按键修饰符： @keyup.enter (后者是我们想要设置的特殊键值)</p><p>​        4：在内联语句处理器中访问原始的dom节点，可以用特殊变量$event传入方法内。</p><p>​        5：事件修饰符：事件+.事件修饰符 能更好的处理事件的细节。.stop-阻阻止事件冒泡.prevent-拦截默认事件.capture-事件变为捕获.self-只在自己范围内触发.once-只触发一次.passive-不拦截默认事件。（要注意修饰符的顺序）</p><p>​        6：按键修饰符：.enter.tab.delete.esc.space.up.down.left.right(就是添加一些特殊的键值)</p><p>​        7:系统修饰符：.ctrl.alt.shift.meta-对应着mac上的cmd键。.exact–可以和前面的串联，表示只有某个特殊按键的时候才会触发。</p><p>​        8：鼠标修饰符：.left.right.middle</p><p>​    双向绑定：v-model，通常和表单一起使用。</p><p>​        -vue中的v-model和v-bind：</p><p>​            -v-model是双向绑定,即表单可以拿到vue中的数据,表单中的数据也可以传到vue中。</p><p>​            -v-bind:value 只能是表单拿到vue的数据,vue无法拿到表单的数据。</p><p>​        -修饰符：.lazy–可以控制v-model绑定的数据在change事件之后同步.number–可以直接将输入的值转换成数值类型(通用).trim–可以自动过滤收尾的空白字符。</p><p>​    -动态组件：v-bind:is=“属性”(这个属性包括：已注册组件的名字/一个组件的选项对象)</p><h5 id="组件注册："><a href="#组件注册：" class="headerlink" title="组件注册："></a>组件注册：</h5><p>-组件名：推荐使用糖葫芦写法，驼峰也是可以的。</p><p>-全局注册：Vue.cmponent()注册的组件可以使用在new Vue()创建出来的根实例中。 </p><p>-局部注册：var 组件1={}来定义组件，然后在new Vue实例中可以通过components:{‘组件名’：组件1}来定义。*局部注册的组件在其子组件中不可用。想要使用的话，只能在模块系统中局部注册-&gt;import 组件 from ‘vue文件中’ export default{ components:{ 组件1，组件2 } }</p><p>​    -？？？在想要只使用基础组件中的一部分时，可以使用require.context只全局注册这些非常通用的基础组件。可以在应用的入口文件（src/main.js）中全局导入基础组件。</p><h5 id="prop："><a href="#prop：" class="headerlink" title="prop："></a>prop：</h5><p>-命名：使用驼峰写法</p><p>-类型：props:[‘字符串1’，‘字符串2’…] 但最好是是能够以对象的形式列出prop(值：类型)</p><p>-传值：任何一个类型的值都可以传递给一个prop，</p><p>-单向数据流：父级prop的更新会向下流到子组件中，</p><p>-使用：在父组件中通过v-bind定义一个值。在子组件的vue实例中定义该属性，并把值设为目标属性的数字即可。这样子组件就能接受到父组件中的属性值向下流下来的数据。</p><p>-验证：为了验证prop中属性传来的值的类型是否正确。验证失败时会产生一个控制台的警告。</p><p>-非prop的attribute？？</p><h5 id="emit："><a href="#emit：" class="headerlink" title="$emit："></a>$emit：</h5><p>-事件名：推荐是用糖葫芦写法。</p><p>-作用：子组件使用它来触发父组件的自定义事件。$emit(event,arg)</p><p>-使用：父组件 v-bind=“属性” 子组件 prop来接受父组件传来的数据。子组件监听了一个事件来来触发父组件中的事件。(子组件的事件触发，来接连触发父组件的事件。)</p><h5 id="："><a href="#：" class="headerlink" title="："></a><slot>：</h5><p>-就是给组件中挖了一个坑，只要在组件的模板中写入了<slot></slot>,那么组件在渲染的时候，写插槽的地方将会被替换为html中组件内写的内容。如果没有，那么中间的内容都会被抛弃。(就像是一个立体的空心积木)</p><p>-是子组件中提供给父组件使用的一个占位符，父组件可以向里面填充任何的内容。</p><p>-具名插槽：有名字的插槽，因为一个子组件中可以加入很多个插槽，为了能区分它们，就有了它。子-<slot name='header'> 父-<template v-slot:header> 使用v-slot来连接子中插槽。</p><p>-默认插槽：没有命名的就是默认插槽，但是前提是子中有<slot> 父中有传值</p><p>-作用域插槽：带参数的插槽，子组件提供给父组件一个仅用于插槽中的参数，父组件就可以通过不同的方式展示和填充内容。？？</p><p>-过滤器：为页面数据添油加醋的功能。</p><p>​    -局部：1：在vue实例中，添加一个filters:{ 方法，用来修改或筛选后端传过来的数据  }来声明过滤器2：使用<code>&#123;&#123; 数据\|过滤器的名字&#125;&#125;  过滤</code>器就是一个函数。</p><p>​    -全局：vue.filter(‘过滤器名字’，函数逻辑)</p><p>-watch：监听的是单个属性，基本类型普通监听，复杂类型 deep监听。监听操作的是数据，而计算操作的是函数。</p><p>-methods:直接修改的数据属性</p><h5 id="渲染函数："><a href="#渲染函数：" class="headerlink" title="渲染函数："></a>渲染函数：</h5><h5 id="单文件组件："><a href="#单文件组件：" class="headerlink" title="单文件组件："></a>单文件组件：</h5><p>-SPA：单页Web应用。特点：在前后端分离的基础上加了一层前端路由</p><p>-扩展名：.vue。</p><p>-其中，css可以使用预处理器来构建。</p><p>前面学到的是vue2，好上手，但是实际应用中要用vue全家桶(vue全家桶：vue-cli，vue-router，vue-resource，vuex) vue-cli:脚手架，相当于是启动了一个请求服务器，把环境搭建好了，只要开发就行。</p><p>脚手架的使用：</p><p>​    1：先安装一个全局webpack。npm install webpack -g。再安装一个全局的vue-cli。 npm install -g vue-cli.</p><p>​    2:cd 进一个要放项目的文件夹 直接创建一个.vue文件。vue create + 项目名。(vue 3.X以上使用，2.x就用npm install webpack + 项目名)</p><p>​    3：安装相应的依赖。npm install</p><p>​    4:起项目。npm run start （也可以显式的指定入口文件。不太会）</p><p>vue引入公共样式的三种方式：</p><p>​    1：入口main.js中引入。  import  from  </p><p>​    2：在index.html中引入。</p><p>​    3：直接在app.vue中引用，但在index.html的head上空出一个<style></p><p>vue组件父子传值的4种方法:props，ref,emit,模板传递通信slot</p><p>​    -props：</p><p>​        静态传值就是直接通过props来传递。</p><p>​        动态传值是通过v-bind来绑定一个要传递值的key，然后后面跟要传递的内容，不过这个内容是可以改变的</p><p>​    -slot：父组件在使用子组件的同时并向其中传值。</p><p>·vue里的ref（$ref）:</p><p>​    1、ref 加在普通的元素上，用this.ref.name 获取到的是dom元素</p><p>　　 2、ref 加在子组件上，用this.ref.name 获取到的是组件实例，可以使用组件的所有方法。</p><p>　  3、如何利用 v-for 和 ref 获取一组数组或者dom 节点</p><p>·prop 着重于数据的传递，它并不能调用子组件里的属性和方法。像创建文章组件时，自定义标题和内容这样的使用场景，最适合使用prop。</p><p>·$ref 着重于索引，主要用来调用子组件里的属性和方法，其实并不擅长数据传递。而且ref用在dom元素的时候，能使到选择器的作用，这个功能比作为索引更常有用到。</p><p>ref  $refs:</p><p>​    ·ref指定了某个dom节点。（相当于是一个字符串型的索引值）</p><p>​    ·refs是所有ref的集合。</p><p>​    ·ref和v-for一起使用时，获取的引用会是一个数组，</p><p>–html中 ref=”profile”</p><p>–组件中  child = perent.$refs.profile(child是perent中所有dom节点的集合，标识就是profile)</p><p>表单验证：validate()</p><p>​    p=this.$refs.form.validate()  submit过来的从上面传来的表单值，是否有效，p.then.</p><h5 id="vue-router："><a href="#vue-router：" class="headerlink" title="vue-router："></a>vue-router：</h5><p>-<strong>核心：</strong>改变url，但是页面不进行整体的刷新。结合vue.js来创建单页应用。   可以通过组合组件来组成应用程序，当把路由加入后，只需要将组件映射到路由，然后告诉路由在哪里渲染。</p><p>-<strong>路由规则：</strong>hash和history</p><p>​    -hash：#=锚点，本质是改变window.location的href属性。可以直接赋值location.hash改变href，但页面不刷新。</p><p>​    -history：可以改变url而不刷新页面。(比较新，IE9之前不能使用，所以hash更加通用一些)</p><p>​        -history.pushState()：类似栈，有进有出</p><p>​        -history.replaceState()：替换url，没有退回(常用的)</p><p>​        -history.back()</p><p>​        -history.forward()</p><p>​        -history.go(num)</p><p>-<strong>路由分类：</strong></p><p>​    -动态路由：path:’/user/:id’ .以冒号开头，只要前缀相同就都能映射到相同的路由上去。</p><p>​    -嵌套路由：有同一个父路由的路由。在普通路由配置的时候加入一个children：[{其他路由}]</p><p>​    -命名路由：给路由加一个name，在使用<code>router-link :to=&quot;&#123; name：‘xx’，params：&#123;xx&#125;&#125;&quot; name</code>是前半段，params是后半段。跳转的路径是/xx/xx.</p><p>-<strong>路由视图：</strong><router-view></router-view> –必须有，相当于是在页面中给路由站了一个位置。</p><p>-props：在路由中加入props参数，可以将组件和路由解耦，这样使的组件更易重用和测试。<strong>设置：</strong>props：true 。这样就会将route.params设置为组件属性（???）—传参这里有很大的问题。</p><p>-<strong>步骤：</strong></p><p>1：定义路由或者从别处引入，<script src="./vue-router.js"></script>。</p><p>2:准备路由所需要的组件。(能够跳转的块)。</p><p>3：创建路由对象，在对象中配置路由规则 var routes=new VueRouter({ path:’/foo’,component:Foo })。（这两值必备，name可有可无）</p><p>4：在vue中注入路由。vue实例中，加入一个router。</p><p>5：通过<router-view></router-view>挖坑，路径匹配到的组件都会渲染到这来。</p><p>6：路由通过<router-link to="相应路由的path">跳转，这个被渲染后会变成a标签，值的前面会变成一个#，从而变成锚点。(链接的一种，就是在<a name="xxx" href="#hello">这就是在特定的xxx的地方设置了一个锚点。)</p><p>-<strong>实际操作：</strong></p><p>​    1：在组件目录下写spa，然后在router目录下使用import引入之前写的spa(使用相对路径(相对路径：./文件名表示在当前目录下。))</p><p>​    2：在router目录中的index.js，的下面写入相应的路由，按照给定的模板写。引入时要注意new router的地址。import .. from ‘new router的地方’(给的模板中设置的name是用在嵌套路由上的。)</p><p>​    3：在main.js中import相应的router</p><p>​    4：在app.vue中加入<router-link>来定义页面中点击触发部分(定义当点击后去到的地方)<router-view>来在页面中显示。</p><p>​    5：重定向-就是在路由中一定要加一个路由，指向有的页面（用户输入了不存在的路由，跳转到有用的页面去）两种写法：1：path:’<em>‘,redirect:’/组件’ 2：path:’\</em>‘,redirect:{name:’组件’}。</p><p>-<strong>路由守卫：</strong> 就是在路由的基础上添加了钩子函数    </p><p>​    -全局前置守卫：router.beforeEach((to,from,next)=&gt;{})  to=即将进入的目标路由对象-到哪去。from=当前要离开的路由-从哪来。next=function，一定要调用这里的方法，来resolve这个钩子。next函数中的参数，会影响执行效果。【无参-&gt;进行下一个钩子，如果全都执行完了，那么导航的状态就是confirmed。false-&gt;中断当前的导航。在正在改变url的过程中，那么url地址会重置到from路由对应的地址。’/‘-&gt;跳转到不同的地址。中断正在跳转的地址，然后去一个新的地址。(可以传递任意函数？？？)。error-&gt;导航过程会被终止，并且错误会传去router.onError()注册过的回调中去。】</p><p>​    -全局解析守卫：router.beforeResolve()=和上面类似。区别：在导航被确认之前，同时在all component内守卫，和异步路由组件被解析之后，解析守卫被调用。</p><p>​    -全局后置钩子：router.afterEach((to,from)=&gt;{})。没有next，不会改变导航本身。</p><p>-<strong>导航解析流程：</strong> (导航：路由正在跳转的过程)</p><p>触发导航 -&gt; 在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。(失活的组件就是要被离开的组件)-&gt;调用全局的 <code>beforeEach</code> 守卫。(在导航前)-&gt;在重用的组件里调用 <code>beforeRouteUpdate</code>(路由改变，组件被复用时调用)-&gt;在路由配置里调用 <code>beforeEnter</code>-&gt;解析异步路由组件-&gt;在被激活的组件里调用 <code>beforeRouteEnter</code>-&gt;调用全局的 <code>beforeResolve</code>-&gt;导航被确认-&gt;调用全局的 <code>afterEach</code> 钩子-&gt;触发 DOM 更新-&gt;调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入</p><p>-元信息：</p><p>-<strong>过渡动效：</strong> 加入一个<transition></transition> 来实现切换路由时中间的过渡动画。</p><p>-<strong>数据获取：</strong> 两种，导航完成<strong>前</strong>-在路由进入的守卫中获取数据，获取数据之后再进行导航/<strong>后</strong>-先导航，结束后在组件的生命周期钩子中获取数据。</p><p>-<strong>滚动行为：</strong> 控制页面来回回滚后，前的滚动条进度保持的位置。<strong>使用：</strong> 给router实例中，加入一个scrollBehavior(to, from, savePosition)方法。</p><h5 id="路由参数："><a href="#路由参数：" class="headerlink" title="路由参数："></a>路由参数：</h5><p>-router传递参数：使用上面的那个router-link</p><p>-接受参数：</p><p>​    -组件接收：在html中获取路由参数, 通过$route.params.参数名</p><p><code>var productType = Vue.component(&#39;productType&#39;,&#123;</code><br>    <code>//在html中获取路由参数, 通过$route.params.参数名</code><br>    <code>template:&#39;&lt;div&gt;这里显示商品编号&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#39;,</code><br><code>&#125;)</code></p><p>​    -js接收：在js中获取路由参数, 通过this.$route.params.参数名</p><p><code>var productType = Vue.component(&#39;productType&#39;,&#123;</code><br>    <code>//在html中获取路由参数, 通过$route.params.参数名</code><br>    <code>template:&#39;&lt;div&gt;这里显示商品编号&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#39;,</code><br>    <code>//模板编译完成之后调用</code><br>    <code>mounted() &#123;</code><br>        <code>//在js中获取路由参数, 通过this.$route.params.参数名</code><br>        <code>console.log(this.$route.params.id)</code><br>    <code>&#125;,</code><br><code>&#125;)</code></p><p>-this.$route.query和this.$route.params的区别：</p><p>​    传参数时，query:{path: item.id} url中会带有参数 params:{name: item.id} url中没有参数显示</p><p>-响应路由的参数变化：</p><h5 id="vuex："><a href="#vuex：" class="headerlink" title="vuex："></a>vuex：</h5><p>-专门为vue.js开发的状态管理模式，集中管理所有组件的状态。</p><p>state–大树的树干–共用的数据，不同的组件就像树的分叉，会使用树的一部分数据，但是会根据自己做出一些调整。这个调整可以使用mutation改变，(过程是同步的？？？—就是逻辑是同步改变的)异步逻辑都封装到action里面。</p><p>-vuex部分文件：api-里面会放一些抽出来的api请求，与后台交互的请求响应代码。？？？   Component-放一些单页面组件，store-index.js=组装模块并导出store的地方，actions.js=根级别的action，mutation.js=跟级别的mutation。modules-中存放着各种模块（这种模块中放的是什么）</p><p>-一个模块中，要创建state，mutation，action，getter</p><p>-<strong>state：</strong>在vue实例中，可以通过this.$store.state.data(可换，数据名，来访问到store中的数据)。当一个组件需要获取多个状态时(数据???)将这些状态都声明在计算中会冗余，这时候，可以使用mapState辅助函数—生成计算数据。（就是在computed中写了一个mapState函数，将上面的参数简化。）</p><p>-<strong>getter：</strong> state的计算属性，就像vue中的computed一样，返回值也会根据他的依赖被缓存起来，依赖值改变才会改变。getter会暴露一个  store.getter的对象，(数据在getter中被计算，我们可以使用store.getter来直接调用这些数据)在getter中也能接受其他的getter的参数。</p><p>-<strong>actions：</strong> state中出来的数据，action要来取数据，然后action中取完的数据（使用commit，其中有两个参数，事件，(???回调函数吗，是什么)）才能再使用mutation来修改里面的值。action 提交的是mutation，而不是直接改变状态。有它的原因就是为了可以在成功和失败两个状态之间横跳。可以使用promise 也可以使用async/await</p><p>-<strong>mutation：</strong> 改变store中的状态，(就像是在原有的树枝上长出一截新的树枝。)有事件和回调函数。(我现在的理解就是他就像java里面的那个函数重写一样，在原有的基础上给原来的增加一些方法)</p><p>-new store-创建实例，其中必备state来存放一个大的共享数据，</p><p>state写数据-&gt;要改变数据状态-&gt;action提交mutation-&gt;mutation直接改变数据。</p><p>Q:1：v-model绑定，循环渲染的时候value怎么设置。</p><p>2：ref，prop的具体区别，实际使用的时候呢</p><p>3:fx-cascader中的数据怎么传</p><p>4:为什么有时候按钮不触发事件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;vue学习&quot;&gt;&lt;a href=&quot;#vue学习&quot; class=&quot;headerlink&quot; title=&quot;vue学习:&quot;&gt;&lt;/a&gt;vue学习:&lt;/h4&gt;&lt;h5 id=&quot;基本知识：&quot;&gt;&lt;a href=&quot;#基本知识：&quot; class=&quot;headerlink&quot; title=&quot;基</summary>
      
    
    
    
    
    <category term="vue全家桶" scheme="http://yoursite.com/tags/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>别划走，先来看看我</title>
    <link href="http://yoursite.com/2020/08/25/about/about/"/>
    <id>http://yoursite.com/2020/08/25/about/about/</id>
    <published>2020-08-25T06:23:29.533Z</published>
    <updated>2020-08-25T06:23:29.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自我介绍："><a href="#自我介绍：" class="headerlink" title="自我介绍："></a>自我介绍：</h3><p>  估计也不会有什么人看到，那就算是写给我自己看的吧。本人女，一个喜欢前端，但是还是很菜的一个前端小菜鸡。希望能用博客记录下我平时的一些学习和成长。</p><p>  纯纯狗派，头像就是我家的小美狗啦。它的名字叫年糕，他有有一个超级爱他的主人呢<del>~</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;自我介绍：&quot;&gt;&lt;a href=&quot;#自我介绍：&quot; class=&quot;headerlink&quot; title=&quot;自我介绍：&quot;&gt;&lt;/a&gt;自我介绍：&lt;/h3&gt;&lt;p&gt;  估计也不会有什么人看到，那就算是写给我自己看的吧。本人女，一个喜欢前端，但是还是很菜的一个前端小菜鸡。希望能用博</summary>
      
    
    
    
    
    <category term="about me" scheme="http://yoursite.com/tags/about-me/"/>
    
  </entry>
  
</feed>
